name: Refresh GA4 (daily + manual)

on:
  workflow_dispatch: {}
  schedule:
    - cron: "15 7 * * *"  # daily at 07:15 UTC

permissions:
  contents: write

jobs:
  refresh:
    runs-on: ubuntu-latest
    env:
      GA4_PROPERTY_ID: ${{ secrets.GA4_PROPERTY_ID }}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      # Create a local package.json in the runner (no heredocs, no commit)
      - name: Create package.json
        run: |
          test -f package.json || npm init -y
          npm pkg set type=commonjs

      # Install only what we need
      - name: Install deps
        run: npm i --no-fund --no-audit @google-analytics/data@^5.0.4

      - name: Decode GCP service account key
        run: |
          mkdir -p .secrets
          echo '${{ secrets.GCP_SA_JSON }}' | base64 -d > .secrets/gcp.json
          echo "GOOGLE_APPLICATION_CREDENTIALS=$PWD/.secrets/gcp.json" >> $GITHUB_ENV

      - name: Build GA4 JSON (KPIs + referrers + authors)
        run: |
          mkdir -p scripts data
          cat > scripts/fetch_ga4.cjs <<'NODE'
          const fs = require("fs");
          const path = require("path");
          const { BetaAnalyticsDataClient } = require("@google-analytics/data");

          const propertyId = process.env.GA4_PROPERTY_ID;
          if (!propertyId) throw new Error("Missing GA4_PROPERTY_ID");
          const client = new BetaAnalyticsDataClient();

          const pad = n => String(n).padStart(2,"0");
          const ymd = d => `${d.getFullYear()}-${pad(d.getMonth()+1)}-${pad(d.getDate())}`;
          const yyyymmdd = d => `${d.getFullYear()}${pad(d.getMonth()+1)}${pad(d.getDate())}`;

          const now = new Date();
          const end = new Date(now); end.setDate(end.getDate()-1);      // yesterday
          const start = new Date(end); start.setDate(start.getDate()-6); // last 7 days

          const startISO = ymd(start);
          const endISO   = ymd(end);
          const property = `properties/${propertyId}`;

          async function runReport({dimensions, metrics, orderBys, limit}) {
            const [res] = await client.runReport({
              property,
              dateRanges: [{ startDate: startISO, endDate: endISO }],
              dimensions: (dimensions||[]).map(name => ({ name })),
              metrics: (metrics||[]).map(name => ({ name })),
              orderBys,
              limit
            });
            return res;
          }

          async function getDailyKPIs() {
            const r = await runReport({
              dimensions: ["date"],
              metrics: [
                "totalUsers",
                "newUsers",
                "screenPageViews",
                "sessions",
                "bounceRate",
                "averageSessionDuration"
              ]
            });
            const map = {};
            for (const row of r.rows ?? []) {
              const d = row.dimensionValues?.[0]?.value || "";
              const m = i => row.metricValues?.[i]?.value || "0";
              map[d] = {
                date: d,
                totalUsers: m(0),
                newUsers: m(1),
                pageviews: m(2),
                sessions: m(3),
                bounceRate: m(4),
                averageSessionDuration: m(5)
              };
            }
            return map;
          }

          async function getReferrers() {
            const r = await runReport({
              dimensions: ["date","firstUserSource"],
              metrics: ["totalUsers"],
              orderBys: [{ metric: { metricName: "totalUsers" }, desc: true }],
              limit: 10000
            });
            const map = {};
            for (const row of r.rows ?? []) {
              const d = row.dimensionValues?.[0]?.value || "";
              const src = row.dimensionValues?.[1]?.value || "";
              const users = row.metricValues?.[0]?.value || "0";
              (map[d] ||= []).push({ source: src, users });
            }
            for (const k of Object.keys(map)) map[k] = map[k].slice(0,5);
            return map;
          }

          async function getAuthors() {
            const r = await runReport({
              dimensions: ["date","customEvent:authors"],
              metrics: ["totalUsers","screenPageViews"],
              orderBys: [{ metric: { metricName: "totalUsers" }, desc: true }],
              limit: 20000
            });
            const map = {};
            for (const row of r.rows ?? []) {
              const d = row.dimensionValues?.[0]?.value || "";
              const name = row.dimensionValues?.[1]?.value || "";
              if (!name || name === "(not set)") continue;
              const users = row.metricValues?.[0]?.value || "0";
              const views = row.metricValues?.[1]?.value || "0";
              (map[d] ||= []).push({ author: name, users, views });
            }
            for (const k of Object.keys(map)) map[k] = map[k].slice(0,10);
            return map;
          }

          (async () => {
            console.log(`[GA4] ${startISO} â†’ ${endISO}`);
            const [kpis, refs, auths] = await Promise.all([
              getDailyKPIs(),
              getReferrers(),
              getAuthors()
            ]);

            const rows = [];
            for (let d = new Date(start); d <= end; d.setDate(d.getDate()+1)) {
              const ds = yyyymmdd(d);
              const base = kpis[ds] || { date: ds };
              base.referrers = refs[ds] || [];
              base.authors   = auths[ds] || [];
              rows.push(base);
            }
            const out = { updatedAt: new Date().toISOString(), range: { start: startISO, end: endISO }, rows };
            fs.writeFileSync(path.join("data","ga4.json"), JSON.stringify(out, null, 2));
            console.log(`Wrote data/ga4.json (rows=${rows.length})`);
          })().catch(e => { console.error(e); process.exit(1); });
          NODE
          node scripts/fetch_ga4.cjs

      - name: Commit updated data
        run: |
          if git status --porcelain | grep -E '^( M|??) data/ga4.json'; then
            git config user.name  "github-actions"
            git config user.email "actions@github.com"
            git add data/ga4.json
            git commit -m "data: refresh ga4.json (KPIs + referrers + authors)"
            git push
          else
            echo "No data changes to commit."
          fi
