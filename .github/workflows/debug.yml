name: Debug GA4 Author Data

on:
  workflow_dispatch: {}

permissions:
  contents: write

jobs:
  debug:
    runs-on: ubuntu-latest
    env:
      GA4_PROPERTY_ID: ${{ secrets.GA4_PROPERTY_ID }}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Create package.json
        run: |
          test -f package.json || npm init -y
          npm pkg set type=commonjs

      - name: Install deps
        run: npm i --no-fund --no-audit @google-analytics/data@^5.0.4

      - name: Decode GCP service account key
        run: |
          mkdir -p .secrets
          echo '${{ secrets.GCP_SA_JSON }}' | base64 -d > .secrets/gcp.json
          echo "GOOGLE_APPLICATION_CREDENTIALS=$PWD/.secrets/gcp.json" >> $GITHUB_ENV

      - name: Debug GA4 Schema and Author Data
        run: |
          mkdir -p scripts
          cat > scripts/debug_ga4.cjs <<'NODE'
          const { BetaAnalyticsDataClient } = require("@google-analytics/data");

          const propertyId = process.env.GA4_PROPERTY_ID;
          if (!propertyId) throw new Error("Missing GA4_PROPERTY_ID");
          const client = new BetaAnalyticsDataClient();

          const property = `properties/${propertyId}`;
          const yesterday = new Date();
          yesterday.setDate(yesterday.getDate() - 1);
          const dateStr = yesterday.toISOString().slice(0, 10);

          console.log(`üîç DEBUGGING GA4 DATA for ${dateStr}`);
          console.log(`üìä Property: ${propertyId}`);

          async function runReport(config) {
            const [res] = await client.runReport({
              property,
              dateRanges: [{ startDate: dateStr, endDate: dateStr }],
              ...config
            });
            return res;
          }

          // 1. Check what events exist
          console.log('\nüìã STEP 1: Available Events');
          try {
            const events = await runReport({
              dimensions: [{ name: "eventName" }],
              metrics: [{ name: "eventCount" }],
              orderBys: [{ metric: { metricName: "eventCount" }, desc: true }],
              limit: 20
            });
            
            console.log('Top events:');
            for (const row of events.rows || []) {
              const event = row.dimensionValues[0].value;
              const count = row.metricValues[0].value;
              console.log(`  ${event}: ${count}`);
            }
          } catch (error) {
            console.log('‚ùå Failed to get events:', error.message);
          }

          // 2. Try each author parameter specifically
          console.log('\nüë§ STEP 2: Testing Author Parameters');
          
          const authorParams = ['authors', 'authorName', 'authorDesignation'];
          
          for (const param of authorParams) {
            console.log(`\nüîç Testing customEvent:${param}`);
            try {
              const result = await runReport({
                dimensions: [{ name: `customEvent:${param}` }],
                metrics: [{ name: "eventCount" }],
                limit: 50
              });

              if (result.rows && result.rows.length > 0) {
                console.log(`‚úÖ Found ${result.rows.length} entries for ${param}:`);
                for (const row of result.rows.slice(0, 10)) {
                  const value = row.dimensionValues[0].value;
                  const count = row.metricValues[0].value;
                  if (value && value !== "(not set)") {
                    console.log(`  "${value}": ${count} events`);
                  }
                }
              } else {
                console.log(`‚ùå No data found for customEvent:${param}`);
              }
            } catch (error) {
              console.log(`‚ùå Error testing ${param}: ${error.message}`);
            }
          }

          // 3. Check page titles for author patterns
          console.log('\nüìÑ STEP 3: Page Title Analysis');
          try {
            const pageTitles = await runReport({
              dimensions: [{ name: "pageTitle" }],
              metrics: [{ name: "screenPageViews" }],
              orderBys: [{ metric: { metricName: "screenPageViews" }, desc: true }],
              limit: 20
            });

            console.log('Top page titles (looking for author patterns):');
            for (const row of pageTitles.rows || []) {
              const title = row.dimensionValues[0].value;
              const views = row.metricValues[0].value;
              
              // Check for common author patterns
              const authorPatterns = [
                /By\s+([^|‚Ä¢\-]+)/i,
                /Author:\s*([^|‚Ä¢\-]+)/i,
                /Written by\s+([^|‚Ä¢\-]+)/i,
                /\|\s*([^|‚Ä¢\-]+)\s*$/,
                /‚Ä¢\s*([^|‚Ä¢\-]+)\s*$/
              ];
              
              let foundAuthor = null;
              for (const pattern of authorPatterns) {
                const match = title.match(pattern);
                if (match) {
                  foundAuthor = match[1].trim();
                  break;
                }
              }
              
              if (foundAuthor) {
                console.log(`  üìù "${title}" ‚Üí Author: "${foundAuthor}" (${views} views)`);
              } else if (title.length < 100) {
                console.log(`  üìÑ "${title}" (${views} views)`);
              }
            }
          } catch (error) {
            console.log('‚ùå Failed to get page titles:', error.message);
          }

          // 4. Try to find any custom parameters
          console.log('\nüîß STEP 4: All Custom Parameters');
          try {
            // Get metadata about available dimensions
            const metadata = await client.getMetadata({
              name: property + '/metadata'
            });
            
            console.log('Available custom dimensions:');
            const customDims = metadata[0].dimensions?.filter(d => 
              d.apiName?.includes('customEvent:') || d.apiName?.includes('custom')
            ) || [];
            
            for (const dim of customDims.slice(0, 10)) {
              console.log(`  ${dim.apiName}: ${dim.uiName}`);
            }
            
          } catch (error) {
            console.log('‚ùå Could not get metadata:', error.message);
          }

          console.log('\nüìä DIAGNOSIS:');
          console.log('If you see author data above, the parameters work but need proper filtering.');
          console.log('If no author data appears, your website is not sending author info to GA4.');
          console.log('Check your GA4 tracking code to ensure author parameters are being sent.');
          NODE
          
          node scripts/debug_ga4.cjs
